# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине программы 
# используется множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, 
# а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.


# values = [1,23,42,'asdfg']

# transformation=lambda x:x

# transformed_values = list(map(transformation, values))
# if values == transformed_values:
#     print('ok') 
# else:
#     print('fail')

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, 
# орбита которой имеет самую большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits),
#  которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. 
#  Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, 
#  зато искусственные спутники были были запущены на круговые орбиты.
#   Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. 
#   Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. 
#   Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса.
#    При решении задачи используйте списочные выражения. 
#    Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, 
#    а затем найти и сам эллипс, имеющий такую площадь. 
# Гарантируется, что самая далекая планета ровно одна.

# from math import pi
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# S=lambda x: pi * x[0] * x[1]

# def find_farthest_orbit(list):
#     max=0
#     for i in list:
#         if i[0]!=i[1]:
#             if S(i)>max:
#                 max=S(i) 
                  
#     return max

# print(find_farthest_orbit(orbits))

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# # from math import pi
 
# def findFarthestOrbit(orbits):
#     return max([orbit for orbit in orbits if orbit[0] != orbit[1]], key=lambda x: pi * x[0] * x[1])
 
 
# orbits = [(1, 3),(2.5, 10),(7, 2),(6, 6),(4, 3)]
 
# print(findFarthestOrbit(orbits))

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# Напишите функцию same_by(characteristic, objects), которая проверяет,
#  все ли объекты имеют одинаковое значение некоторой характеристики, и возвращают True, если это так.
#   Если значение характеристики для разных объектов отличается - то False. Для пустого набора объектов, 
#   функция должна возвращать True. 
# Аргумент characteristic - это функция, которая принимает объект и вычисляет его характеристику.

# values=[0,2,10,6]

# def same_by(charact,objects):              #charact это lambda x: x%2, objects  это  values
#     result=[charact(i) for i in objects]    #генератор списка
#     for i in range (len(result)-1):
#         if result[i]!=result[i+1]:
#             return False
#         return True

# if same_by(lambda x: x%2, values):
#     print('same')
# else:
#     print('different')

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# 1) Вводится список целых чисел в одну строчку через пробел. 
# Необходимо оставить в нем только двузначные числа.
# Реализовать программу с использованием функции filter. 
# Результат отобразить на экране в виде последовательности
# оставшихся чисел в одну строчку через пробел.
# [1,2,3,4,22,234,24] ----> [22, 24]

# list1=list(map(int,input( "Введите массив: ").split()))
# print(list1)
# list2=list(filter(lambda x:abs(x)>9 and abs (x)<100,list1))
# print(list2)

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# 2) Напишите программу, которая принимает на вход 
# вещественное число и показывает сумму его цифр.

# print(sum(map(int, filter(lambda el: el.isdigit(), input('Enter a number: ')))))

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# [12,'sadf',5643] ---> ['sadf'] ,[12,5643]

# list_1 = [12,'sadf',5643, 12.12, 1+2j]

# Numbers = list(filter(lambda x: type(x) == int or type(x) == float or type(x) == complex, list_1))
# print(Numbers)
# stringes = list(filter(lambda x: type(x) == str, list_1))
# print(stringes)

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# lst = [x for x in input().split()]
# res1 = list(filter(lambda el: not el.isdigit(), lst))
# res2 = list(map(int, filter(lambda el: el.isdigit(), lst)))
# print (res1,res2)






